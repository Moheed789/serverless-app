service: joi-testing

frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1
  profile: rafae

functions:
  createEmployeeLambda:
    handler: functions/employee/create.handler
    tracing: Active
    timeout: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource:
          - Fn::GetAtt: [EmployeeTable, Arn]
    events:
      - http:
          path: /createEmployee
          method: POST
          cors: true
  getEmployeeLambda:
    handler: functions/employee/get.handler
    tracing: Active
    timeout: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Query'
        Resource:
          - Fn::Join:
              - '/'
              - - Fn::GetAtt: [EmployeeTable, Arn]
                - 'index'
                - 'employee-index'

    events:
      - http:
          path: /getEmployee
          method: GET
          cors: true
  deleteEmployeeLambda:
    handler: functions/employee/delete.handler
    tracing: Active
    timeout: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:DeleteItem'
        Resource:
          - Fn::GetAtt: [EmployeeTable, Arn]
    events:
      - http:
          path: /deleteEmployee/{id}
          method: DELETE
          cors: true
  getOneEmployeeLambda:
    handler: functions/employee/getOneItem.handler
    tracing: Active
    timeout: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:GetItem'
        Resource:
          - Fn::GetAtt: [EmployeeTable, Arn]
    events:
      - http:
          path: /getEmployee/{id}
          method: GET
          cors: true
  updateEmployeeLambda:
    handler: functions/employee/update.handler
    tracing: Active
    timeout: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
        Resource:
          - Fn::GetAtt: [EmployeeTable, Arn]
    events:
      - http:
          path: /updateEmployee/{id}
          method: PUT
          cors: true
  generatedSignedUrl:
    handler: functions/files/generatePutSignUrl.handler
    events:
      - http:
          path: /generateEmployeeSignedUrl
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:*'
        Resource:
          - !Sub "arn:aws:s3:::moheedemployees3bucket/*"
  getSignedUrl:
    handler: functions/files/generateGetSignUrl.handler
    tracing: Active
    timeout: 10
    events:
      - http:
          path: /getEmployeesSignedUrl
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:ListBucket'
        Resource:
          - !Sub "arn:aws:s3:::moheedemployees3bucket"
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
        Resource:
          - !Sub "arn:aws:s3:::moheedemployees3bucket/*"

          


resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        DeletionProtectionEnabled: false
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TableName: employee-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'department'
            AttributeType: 'S'
          - AttributeName: 'age'
            AttributeType: 'N'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: 'employee-index'
            KeySchema:
              - AttributeName: 'department'
                KeyType: 'HASH'
              - AttributeName: 'age'
                KeyType: 'RANGE'
            Projection:
              ProjectionType: 'ALL'
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: moheedemployees3bucket